#!/usr/bin/env node

/**
 * –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ
 * 
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–ï —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, –∞ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
 * 
 * –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:
 * 1. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (—ë‚Üí–µ, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è, —Ä–µ–≥–∏—Å—Ç—Ä)
 * 2. –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞, –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö)
 * 3. –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö ("–∫—É—Ö–æ–Ω–Ω—ã–π –Ω–æ–∂" = "–Ω–æ–∂ –∫—É—Ö–æ–Ω–Ω—ã–π")
 * 4. –£—á–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –≤–∞—Ä–∏–∞—Ü–∏–π ("–¥—Ä–æ–∑–¥" = "–∫–∞–Ω–∞–¥—Å–∫–∏–π –¥—Ä–æ–∑–¥")
 * 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏ –ø–æ–ª–Ω—ã—Ö —Ñ–æ—Ä–º
 * 
 * –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞—Ä—è –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –Ω–∞–π–¥–µ–Ω—ã
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä—É—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ —Ä–µ—à–∏—Ç—å, –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Å—Ç–∞–≤–∏—Ç—å
 */

const fs = require('fs');
const path = require('path');

const CSV_PATH = path.join(__dirname, '..', 'public', 'words.csv');

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function normalizeWord(word) {
  if (!word) return '';
  
  let normalized = String(word)
    .toLowerCase()
    .replace(/—ë/g, '–µ')
    .replace(/[.,!?:;"'()\-‚Äì‚Äî]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
  
  // –£–º–Ω–∞—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—á–µ–≤–∏–¥–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  if (normalized.length > 4) {
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö)
    normalized = normalized
      .replace(/([–∞—è])$/, '') // —Ä–µ—Ü–µ–ø—Ç-–∞, —Ä–µ—Ü–µ–ø—Ç-—è -> —Ä–µ—Ü–µ–ø—Ç
      .replace(/([—ã–∏])$/, '') // —Ä–µ—Ü–µ–ø—Ç-—ã, —Ä–µ—Ü–µ–ø—Ç-–∏ -> —Ä–µ—Ü–µ–ø—Ç
      .replace(/([–µ–æ])$/, '') // –Ω–æ—Å–æ–∫-–µ, –Ω–æ—Å–æ–∫-–æ -> –Ω–æ—Å–æ–∫
      .replace(/([—É—é])$/, '') // –Ω–æ—Å–æ–∫-—É, –Ω–æ—Å–æ–∫-—é -> –Ω–æ—Å–æ–∫
      .replace(/([–æ–º–µ–º])$/, '') // –Ω–æ—Å–æ–∫-–æ–º, –Ω–æ—Å–æ–∫-–µ–º -> –Ω–æ—Å–æ–∫
      .replace(/([–∞—Ö—è—Ö])$/, '') // –Ω–æ—Å–æ–∫-–∞—Ö, –Ω–æ—Å–æ–∫-—è—Ö -> –Ω–æ—Å–æ–∫
      .replace(/([–∞–º–∏—è–º–∏])$/, '') // –Ω–æ—Å–æ–∫-–∞–º–∏, –Ω–æ—Å–æ–∫-—è–º–∏ -> –Ω–æ—Å–æ–∫
      .replace(/([–æ–≤–µ–≤])$/, '') // –Ω–æ—Å–æ–∫-–æ–≤, –Ω–æ—Å–æ–∫-–µ–≤ -> –Ω–æ—Å–æ–∫
      // –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–ª—É—á–∞–∏)
      .replace(/([—Å–∫–∏–π—Å–∫–∞—è—Å–∫–æ–µ—Å–∫–∏–µ])$/, '') // –∫–∞–Ω–∞–¥—Å–∫–∏–π -> –∫–∞–Ω–∞–¥
      .replace(/([–æ–π–∞—è–æ–µ—ã–µ])$/, '') // –∫—É—Ö–æ–Ω–Ω—ã–π -> –∫—É—Ö–æ–Ω–Ω
      .replace(/([—ã–π–∞—è–æ–µ—ã–µ])$/, '') // –∫—É—Ö–æ–Ω–Ω—ã–π -> –∫—É—Ö–æ–Ω–Ω
      .replace(/([–∏–π—å—è—å–µ—å–∏])$/, '') // –∫—É—Ö–æ–Ω–Ω—ã–π -> –∫—É—Ö–æ–Ω–Ω
      .replace(/([–Ω–Ω])$/, '–Ω'); // –∫—É—Ö–æ–Ω–Ω -> –∫—É—Ö–æ–Ω–Ω (—É–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω–æ–µ –Ω)
  }
  
  return normalized;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–∞–∑—ã —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª–æ–≤
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —Å–ª–æ–≤–∞, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–∞–∂–¥–æ–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–∏–ø–∞ "–∫—É—Ö–æ–Ω–Ω—ã–π –Ω–æ–∂" = "–Ω–æ–∂ –∫—É—Ö–æ–Ω–Ω—ã–π"
 */
function normalizePhrase(phrase) {
  const normalized = normalizeWord(phrase);
  const words = normalized.split(' ').filter(w => w.length > 0);
  return words.sort().join(' ');
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ CSV —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
 */
function parseCSVLine(line) {
  const result = [];
  let current = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') {
      if (inQuotes && line[i + 1] === '"') {
        current += '"';
        i++;
      } else {
        inQuotes = !inQuotes;
      }
    } else if (ch === ',' && !inQuotes) {
      result.push(current.trim());
      current = '';
    } else {
      current += ch;
    }
  }
  result.push(current.trim());
  return result;
}

/**
 * –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ CSV —Å—Ç—Ä–æ–∫–∏
 */
function csvJoin(fields) {
  return fields
    .map((f) => {
      if (f == null) return '';
      const needsQuotes = /[",\n]/.test(f);
      let val = String(f).replace(/"/g, '""');
      return needsQuotes ? `"${val}"` : val;
    })
    .join(',');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 */
function findAndMoveDuplicates() {
  console.log('üîç –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
  console.log(`üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${CSV_PATH}`);
  
  if (!fs.existsSync(CSV_PATH)) {
    console.error('‚ùå –§–∞–π–ª public/words.csv –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
  }

  console.log('üìñ –ß—Ç–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è...');
  const raw = fs.readFileSync(CSV_PATH, 'utf8');
  const lines = raw.split(/\r?\n/);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const hasHeader = lines.length > 0 && /\b(—Å–ª–æ–≤–æ|word)\b/i.test(lines[0]);
  const header = hasHeader ? lines[0] : null;
  const startIndex = hasHeader ? 1 : 0;

  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ ${lines.length - startIndex} –∑–∞–ø–∏—Å–µ–π...`);
  console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${hasHeader ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º
  const phraseGroups = new Map();
  const allEntries = [];

  // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
  for (let i = startIndex; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;

    const cols = parseCSVLine(line);
    if (cols.length < 3) continue;

    const word = cols[0] || '';
    const category = cols[1] || '';
    const difficulty = cols[2] || '';
    
    if (!word) continue;

    const entry = {
      originalLine: line,
      word,
      category,
      difficulty,
      lineNumber: i + 1,
      normalizedPhrase: normalizePhrase(word)
    };

    allEntries.push(entry);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º
    if (!phraseGroups.has(entry.normalizedPhrase)) {
      phraseGroups.set(entry.normalizedPhrase, []);
    }
    phraseGroups.get(entry.normalizedPhrase).push(entry);
  }

  // –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const uniqueEntries = [];
  const duplicateEntries = [];
  let duplicateGroups = 0;

  console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');

  for (const [normalizedPhrase, entries] of phraseGroups) {
    if (entries.length > 1) {
      duplicateGroups++;
      console.log(`\nüìù –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è "${normalizedPhrase}":`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      entries.forEach((entry, index) => {
        console.log(`  ${index + 1}. "${entry.word}" (—Å—Ç—Ä–æ–∫–∞ ${entry.lineNumber}, ${entry.difficulty}, ${entry.category})`);
      });

      // –û—Å—Ç–∞–≤–ª—è–µ–º –ü–ï–†–í–´–ô –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
      const keep = entries[0];
      uniqueEntries.push(keep);
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
      for (let i = 1; i < entries.length; i++) {
        duplicateEntries.push(entries[i]);
      }
    } else {
      // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å
      uniqueEntries.push(entries[0]);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ backup
  const backupName = `words_backup_${new Date().toISOString().replace(/[:.]/g, '-')}.csv`;
  const backupPath = path.join(__dirname, '..', 'public', backupName);
  fs.writeFileSync(backupPath, raw, 'utf8');
  console.log(`\nüíæ –°–æ–∑–¥–∞–Ω backup: ${path.relative(process.cwd(), backupPath)}`);

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ + –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∫–æ–Ω—Ü–µ
  const finalEntries = [...uniqueEntries, ...duplicateEntries];

  // –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const outputLines = [];
  if (hasHeader) outputLines.push(header);
  
  for (const entry of finalEntries) {
    const cols = parseCSVLine(entry.originalLine);
    outputLines.push(csvJoin(cols));
  }

  fs.writeFileSync(CSV_PATH, outputLines.join('\n') + '\n', 'utf8');

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const originalCount = lines.length - startIndex;
  const uniqueCount = uniqueEntries.length;
  const duplicateCount = duplicateEntries.length;

  console.log(`\n=== üìä –†–ï–ó–£–õ–¨–¢–ê–¢ ===`);
  console.log(`üìà –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${originalCount}`);
  console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${uniqueCount}`);
  console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateCount}`);
  console.log(`üìÅ –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateGroups}`);
  console.log(`üìÑ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${path.relative(process.cwd(), CSV_PATH)}`);
  
  if (duplicateCount > 0) {
    console.log(`\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: ${duplicateCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏`);
    console.log(`üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –∏ —Ä–µ—à–∏—Ç—å, –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Å—Ç–∞–≤–∏—Ç—å`);
  } else {
    console.log(`\nüéâ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–ª–æ–≤–∞—Ä—å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏`);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  if (duplicateGroups > 0) {
    console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
    let exampleCount = 0;
    for (const [normalizedPhrase, entries] of phraseGroups) {
      if (entries.length > 1 && exampleCount < 3) {
        console.log(`  ‚Ä¢ "${normalizedPhrase}" -> ${entries.map(e => `"${e.word}"`).join(', ')}`);
        exampleCount++;
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  console.log('üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ main module');
  findAndMoveDuplicates();
} else {
  console.log('üì¶ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –º–æ–¥—É–ª—å');
}

/**
 * ========================================
 * –ê–í–¢–û–¢–ï–°–¢–´
 * ========================================
 */

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function runTests() {
  console.log('\nüß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤...');
  
  const tests = [
    // –¢–µ—Å—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤
    {
      name: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤',
      test: () => {
        assert(normalizeWord('–î—Ä–æ–∑–¥') === '–¥—Ä–æ–∑–¥', '–î—Ä–æ–∑–¥ -> –¥—Ä–æ–∑–¥');
        assert(normalizeWord('–†–ï–¶–ï–ü–¢') === '—Ä–µ—Ü–µ–ø—Ç', '–†–ï–¶–ï–ü–¢ -> —Ä–µ—Ü–µ–ø—Ç');
        assert(normalizeWord('–Ω–æ—Å–æ–∫') === '–Ω–æ—Å–æ–∫', '–Ω–æ—Å–æ–∫ -> –Ω–æ—Å–æ–∫');
      }
    },
    {
      name: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞',
      test: () => {
        assert(normalizeWord('—Ä–µ—Ü–µ–ø—Ç—ã') === '—Ä–µ—Ü–µ–ø—Ç', '—Ä–µ—Ü–µ–ø—Ç—ã -> —Ä–µ—Ü–µ–ø—Ç');
        assert(normalizeWord('–Ω–æ—Å–∫–∏') === '–Ω–æ—Å–æ–∫', '–Ω–æ—Å–∫–∏ -> –Ω–æ—Å–æ–∫');
        assert(normalizeWord('—Ä–µ—Ü–µ–ø—Ç–∞') === '—Ä–µ—Ü–µ–ø—Ç', '—Ä–µ—Ü–µ–ø—Ç–∞ -> —Ä–µ—Ü–µ–ø—Ç');
      }
    },
    {
      name: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö',
      test: () => {
        assert(normalizeWord('–∫–∞–Ω–∞–¥—Å–∫–∏–π') === '–∫–∞–Ω–∞–¥', '–∫–∞–Ω–∞–¥—Å–∫–∏–π -> –∫–∞–Ω–∞–¥');
        assert(normalizeWord('–∫—É—Ö–æ–Ω–Ω—ã–π') === '–∫—É—Ö–æ–Ω–Ω', '–∫—É—Ö–æ–Ω–Ω—ã–π -> –∫—É—Ö–æ–Ω–Ω');
      }
    },
    {
      name: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ñ—Ä–∞–∑',
      test: () => {
        assert(normalizePhrase('–∫—É—Ö–æ–Ω–Ω—ã–π –Ω–æ–∂') === '–∫—É—Ö–æ–Ω–Ω –Ω–æ–∂', '–∫—É—Ö–æ–Ω–Ω—ã–π –Ω–æ–∂ -> –∫—É—Ö–æ–Ω–Ω –Ω–æ–∂');
        assert(normalizePhrase('–Ω–æ–∂ –∫—É—Ö–æ–Ω–Ω—ã–π') === '–∫—É—Ö–æ–Ω–Ω –Ω–æ–∂', '–Ω–æ–∂ –∫—É—Ö–æ–Ω–Ω—ã–π -> –∫—É—Ö–æ–Ω–Ω –Ω–æ–∂');
        assert(normalizePhrase('–≤–µ—Ä–µ–≤–∫–∞ –¥–ª—è –±–µ–ª—å—è') === '–±–µ–ª—å—è –≤–µ—Ä–µ–≤–∫–∞ –¥–ª—è', '–≤–µ—Ä–µ–≤–∫–∞ –¥–ª—è –±–µ–ª—å—è -> –±–µ–ª—å—è –≤–µ—Ä–µ–≤–∫–∞ –¥–ª—è');
        assert(normalizePhrase('–±–µ–ª—å–µ–≤–∞—è –≤–µ—Ä–µ–≤–∫–∞') === '–±–µ–ª—å–µ–≤ –≤–µ—Ä–µ–≤–∫–∞', '–±–µ–ª—å–µ–≤–∞—è –≤–µ—Ä–µ–≤–∫–∞ -> –±–µ–ª—å–µ–≤ –≤–µ—Ä–µ–≤–∫–∞');
      }
    },
    {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤',
      test: () => {
        assert(normalizeWord('–¥—Ä–æ–∑–¥!') === '–¥—Ä–æ–∑–¥', '–¥—Ä–æ–∑–¥! -> –¥—Ä–æ–∑–¥');
        assert(normalizeWord('–¥—Ä–æ–∑–¥,') === '–¥—Ä–æ–∑–¥', '–¥—Ä–æ–∑–¥, -> –¥—Ä–æ–∑–¥');
        assert(normalizeWord('–¥—Ä–æ–∑–¥-–ø—Ç–∏—Ü–∞') === '–¥—Ä–æ–∑–¥–ø—Ç–∏—Ü–∞', '–¥—Ä–æ–∑–¥-–ø—Ç–∏—Ü–∞ -> –¥—Ä–æ–∑–¥–ø—Ç–∏—Ü–∞');
        assert(normalizeWord('–¥—Ä–æ–∑–¥  –ø—Ç–∏—Ü–∞') === '–¥—Ä–æ–∑–¥ –ø—Ç–∏—Ü–∞', '–¥—Ä–æ–∑–¥  –ø—Ç–∏—Ü–∞ -> –¥—Ä–æ–∑–¥ –ø—Ç–∏—Ü–∞');
      }
    },
    {
      name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —ë/–µ',
      test: () => {
        assert(normalizeWord('–¥—Ä–æ–∑–¥') === '–¥—Ä–æ–∑–¥', '–¥—Ä–æ–∑–¥ -> –¥—Ä–æ–∑–¥');
        assert(normalizeWord('–¥—Ä–æ–∑–¥') === '–¥—Ä–æ–∑–¥', '–¥—Ä–æ–∑–¥ -> –¥—Ä–æ–∑–¥');
      }
    },
    {
      name: '–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏',
      test: () => {
        // –≠—Ç–∏ —Å–ª–æ–≤–∞ –ù–ï –¥–æ–ª–∂–Ω—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        assert(normalizeWord('–∞—Ä–∫–∞') !== normalizeWord('–∞—Ä–∏—è'), '–∞—Ä–∫–∞ != –∞—Ä–∏—è');
        assert(normalizeWord('–ø–æ–ª') !== normalizeWord('–ø–æ–ª–µ'), '–ø–æ–ª != –ø–æ–ª–µ');
        assert(normalizeWord('—Ä–æ–∫') !== normalizeWord('—Ä–æ–∫–æ–∫–æ'), '—Ä–æ–∫ != —Ä–æ–∫–æ–∫–æ');
      }
    },
    {
      name: '–¢–µ—Å—Ç—ã –∏–∑ –¢–ó',
      test: () => {
        // "–¥—Ä–æ–∑–¥"-"–∫–∞–Ω–∞–¥—Å–∫–∏–π –¥—Ä–æ–∑–¥"
        assert(normalizePhrase('–¥—Ä–æ–∑–¥') === normalizePhrase('–∫–∞–Ω–∞–¥—Å–∫–∏–π –¥—Ä–æ–∑–¥'), '–¥—Ä–æ–∑–¥ = –∫–∞–Ω–∞–¥—Å–∫–∏–π –¥—Ä–æ–∑–¥');
        
        // "—Ä–µ—Ü–µ–ø—Ç"-"—Ä–µ—Ü–µ–ø—Ç—ã"  
        assert(normalizePhrase('—Ä–µ—Ü–µ–ø—Ç') === normalizePhrase('—Ä–µ—Ü–µ–ø—Ç—ã'), '—Ä–µ—Ü–µ–ø—Ç = —Ä–µ—Ü–µ–ø—Ç—ã');
        
        // "–∫—É—Ö–æ–Ω–Ω—ã–π –Ω–æ–∂"-"–Ω–æ–∂ –∫—É—Ö–æ–Ω–Ω—ã–π"
        assert(normalizePhrase('–∫—É—Ö–æ–Ω–Ω—ã–π –Ω–æ–∂') === normalizePhrase('–Ω–æ–∂ –∫—É—Ö–æ–Ω–Ω—ã–π'), '–∫—É—Ö–æ–Ω–Ω—ã–π –Ω–æ–∂ = –Ω–æ–∂ –∫—É—Ö–æ–Ω–Ω—ã–π');
        
        // "–Ω–æ—Å–æ–∫"-"–Ω–æ—Å–∫–∏"
        assert(normalizePhrase('–Ω–æ—Å–æ–∫') === normalizePhrase('–Ω–æ—Å–∫–∏'), '–Ω–æ—Å–æ–∫ = –Ω–æ—Å–∫–∏');
        
        // "–≤–µ—Ä–µ–≤–∫–∞ –¥–ª—è –±–µ–ª—å—è"-"–±–µ–ª—å–µ–≤–∞—è –≤–µ—Ä–µ–≤–∫–∞"
        assert(normalizePhrase('–≤–µ—Ä–µ–≤–∫–∞ –¥–ª—è –±–µ–ª—å—è') === normalizePhrase('–±–µ–ª—å–µ–≤–∞—è –≤–µ—Ä–µ–≤–∫–∞'), '–≤–µ—Ä–µ–≤–∫–∞ –¥–ª—è –±–µ–ª—å—è = –±–µ–ª—å–µ–≤–∞—è –≤–µ—Ä–µ–≤–∫–∞');
      }
    }
  ];

  let passed = 0;
  let failed = 0;

  for (const test of tests) {
    try {
      test.test();
      console.log(`‚úÖ ${test.name}`);
      passed++;
    } catch (error) {
      console.log(`‚ùå ${test.name}: ${error.message}`);
      failed++;
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${passed} –ø—Ä–æ–π–¥–µ–Ω–æ, ${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
  
  if (failed === 0) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.');
  }
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è assert –¥–ª—è —Ç–µ—Å—Ç–æ–≤
 */
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç --test)
 */
if (process.argv.includes('--test')) {
  runTests();
  process.exit(0);
}

module.exports = { findAndMoveDuplicates, normalizeWord, normalizePhrase, runTests };
