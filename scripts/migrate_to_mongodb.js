#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ MongoDB
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const mongoConnection = require('../src/infrastructure/MongoConnection');
const WordFileRepository = require('../src/infrastructure/WordFileRepository');
const FileStatsRepository = require('../src/infrastructure/FileStatsRepository');

class DataMigrator {
  constructor() {
    this.db = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
   */
  async initialize() {
    try {
      this.db = await mongoConnection.connect();
      await mongoConnection.createIndexes();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
      throw error;
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ MongoDB
   */
  async migrateWords() {
    console.log('\nüìö –ú–∏–≥—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è...');
    
    try {
      const wordsFile = path.join(__dirname, '../public/words.csv');
      const wordRepository = new WordFileRepository(wordsFile);
      const words = await wordRepository.loadWords();
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${words.length} —Å–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
      
      let migrated = 0;
      let skipped = 0;
      
      for (const wordEntry of words) {
        try {
          await this.db.collection('words').insertOne({
            word: wordEntry.word,
            category: wordEntry.category,
            level: wordEntry.level,
            createdAt: new Date()
          });
          migrated++;
        } catch (error) {
          if (error.code === 11000) { // –î—É–±–ª–∏–∫–∞—Ç
            skipped++;
          } else {
            throw error;
          }
        }
      }
      
      console.log(`‚úÖ –°–ª–æ–≤–∞—Ä—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: ${migrated} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã)`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è:', error.message);
      throw error;
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ MongoDB
   */
  async migratePlayerStats() {
    console.log('\nüë• –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤...');
    
    try {
      const statsDir = path.join(__dirname, '../public/stats');
      const playersDir = path.join(statsDir, 'players');
      
      if (!fs.existsSync(playersDir)) {
        console.log('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        return;
      }
      
      const playerFiles = fs.readdirSync(playersDir).filter(f => f.endsWith('.json'));
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${playerFiles.length} —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤`);
      
      let migrated = 0;
      
      for (const file of playerFiles) {
        try {
          const filePath = path.join(playersDir, file);
          const playerData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MongoDB
          const mongoPlayerData = {
            playerKey: playerData.playerKey,
            displayName: playerData.displayName,
            totals: playerData.totals || {},
            perRoundSpwSamples: {
              r0: playerData.perRoundSpwSamples?.[0] || [],
              r1: playerData.perRoundSpwSamples?.[1] || [],
              r2: playerData.perRoundSpwSamples?.[2] || []
            },
            bestFirstRoundSpw: playerData.bestFirstRoundSpw,
            bestSecondRoundSpw: playerData.bestSecondRoundSpw,
            bestThirdRoundSpw: playerData.bestThirdRoundSpw,
            bestTurnByRound: {
              r0: playerData.bestTurnByRound?.[0],
              r1: playerData.bestTurnByRound?.[1],
              r2: playerData.bestTurnByRound?.[2]
            },
            maxPassedPerGame: playerData.maxPassedPerGame,
            bestWinStreak: playerData.bestWinStreak,
            currentWinStreak: playerData.currentWinStreak,
            medianSpwByRound: playerData.medianSpwByRound || {},
            lastPlayedAt: playerData.lastPlayedAt ? new Date(playerData.lastPlayedAt) : null,
            updatedAt: new Date()
          };
          
          await this.db.collection('player_stats').replaceOne(
            { playerKey: playerData.playerKey },
            mongoPlayerData,
            { upsert: true }
          );
          
          migrated++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
        }
      }
      
      console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞: ${migrated} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ MongoDB
   */
  async migrateLeaderboards() {
    console.log('\nüèÜ –ú–∏–≥—Ä–∞—Ü–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤...');
    
    try {
      const statsDir = path.join(__dirname, '../public/stats');
      const leaderboardsDir = path.join(statsDir, 'leaderboards');
      
      if (!fs.existsSync(leaderboardsDir)) {
        console.log('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
        return;
      }
      
      const leaderboardFiles = fs.readdirSync(leaderboardsDir).filter(f => f.endsWith('.json'));
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${leaderboardFiles.length} —Ñ–∞–π–ª–æ–≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤`);
      
      let migrated = 0;
      
      for (const file of leaderboardFiles) {
        try {
          const filePath = path.join(leaderboardsDir, file);
          const leaderboardData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
          const metric = file.replace('.json', '');
          
          const mongoLeaderboardData = {
            metric,
            data: leaderboardData.map((item, index) => ({
              ...item,
              rank: index + 1
            })),
            updatedAt: new Date()
          };
          
          await this.db.collection('leaderboards').replaceOne(
            { metric },
            mongoLeaderboardData,
            { upsert: true }
          );
          
          migrated++;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ${file}:`, error.message);
        }
      }
      
      console.log(`‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã: ${migrated} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –ú–∏–≥—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ JSONL —Ñ–∞–π–ª–æ–≤ –≤ MongoDB
   */
  async migrateGameSessions() {
    console.log('\nüéÆ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π...');
    
    try {
      const statsDir = path.join(__dirname, '../public/stats');
      const sessionsDir = path.join(statsDir, 'sessions');
      
      if (!fs.existsSync(sessionsDir)) {
        console.log('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
        return;
      }
      
      const sessionFiles = fs.readdirSync(sessionsDir).filter(f => f.endsWith('.jsonl'));
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${sessionFiles.length} —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π`);
      
      let migrated = 0;
      
      for (const file of sessionFiles) {
        try {
          const filePath = path.join(sessionsDir, file);
          const gameId = file.replace('.jsonl', '');
          const content = fs.readFileSync(filePath, 'utf8');
          const lines = content.split('\n').filter(line => line.trim());
          
          const events = lines.map((line, index) => {
            const event = JSON.parse(line);
            return {
              gameId,
              sequence: index + 1,
              type: event.type,
              timestamp: new Date(event.ts || Date.now()),
              data: event
            };
          });
          
          if (events.length > 0) {
            await this.db.collection('game_events').insertMany(events);
            migrated++;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ ${file}:`, error.message);
        }
      }
      
      console.log(`‚úÖ –ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã: ${migrated} —Å–µ—Å—Å–∏–π`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  async verifyMigration() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    try {
      const wordsCount = await this.db.collection('words').countDocuments();
      const playersCount = await this.db.collection('player_stats').countDocuments();
      const leaderboardsCount = await this.db.collection('leaderboards').countDocuments();
      const eventsCount = await this.db.collection('game_events').countDocuments();
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:`);
      console.log(`   –°–ª–æ–≤–∞: ${wordsCount}`);
      console.log(`   –ò–≥—Ä–æ–∫–∏: ${playersCount}`);
      console.log(`   –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã: ${leaderboardsCount}`);
      console.log(`   –°–æ–±—ã—Ç–∏—è –∏–≥—Ä: ${eventsCount}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      const sampleWord = await this.db.collection('words').findOne({});
      const samplePlayer = await this.db.collection('player_stats').findOne({});
      const sampleLeaderboard = await this.db.collection('leaderboards').findOne({});
      
      console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
      if (sampleWord) {
        console.log(`   –°–ª–æ–≤–æ: ${sampleWord.word} (${sampleWord.category}, ${sampleWord.level})`);
      }
      if (samplePlayer) {
        console.log(`   –ò–≥—Ä–æ–∫: ${samplePlayer.displayName} (${samplePlayer.totals.gamesPlayed} –∏–≥—Ä)`);
      }
      if (sampleLeaderboard) {
        console.log(`   –õ–∏–¥–µ—Ä–±–æ—Ä–¥: ${sampleLeaderboard.metric} (${sampleLeaderboard.data.length} –∑–∞–ø–∏—Å–µ–π)`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  async runMigration() {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB...');
    
    try {
      await this.initialize();
      await this.migrateWords();
      await this.migratePlayerStats();
      await this.migrateLeaderboards();
      await this.migrateGameSessions();
      await this.verifyMigration();
      
      console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    } finally {
      await mongoConnection.disconnect();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const migrator = new DataMigrator();
  migrator.runMigration();
}

module.exports = DataMigrator;

