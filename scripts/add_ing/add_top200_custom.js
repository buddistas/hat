const fs = require('fs');
const path = require('path');

function normalizeForSet(s) {
  return String(s)
    .toLowerCase()
    .trim()
    .replace(/ё/g, 'е')
    .replace(/[.,!?:;"'()\-–—]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
}

const C = {
  digital: 'Цифровые продукты',
  nature: 'Природные явления',
  science: 'Наука и технологии',
  celebs: 'Знаменитости',
};

// Candidate pools. Words are uppercase as per CSV convention. Level: "обычный" by default.
// Keep nouns or stable noun phrases; avoid punctuation per validator rules.
const poolDigital = [
  'ПРИЛОЖЕНИЕ', 'МОБИЛЬНОЕ ПРИЛОЖЕНИЕ', 'ВЕБ-САЙТ', 'ПОИСКОВИК', 'БРАУЗЕР', 'МЕССЕНДЖЕР', 'СОЦСЕТЬ', 'ПОДКАСТ', 'СТРИМИНГ', 'ПЛЕЕР',
  'ФОТОРЕДАКТОР', 'ВИДЕОХОСТИНГ', 'ОБЛАЧНОЕ ХРАНИЛИЩЕ', 'КАРТЫ', 'НАВИГАТОР', 'КАЛЕНДАРЬ', 'ПОЧТА', 'НОВОСТНОЕ ПРИЛОЖЕНИЕ', 'ЗАМЕТКИ', 'ЗАДАЧНИК',
  'ЭЛЕКТРОННАЯ КНИГА', 'ЧИТАЛКА', 'ФИНТЕХ ПРИЛОЖЕНИЕ', 'ИНТЕРНЕТ-БАНК', 'КРИПТОКОШЕЛЕК', 'ОБМЕННИК', 'БИРЖА', 'ТРЕКЕР', 'ФИТНЕС-ПРИЛОЖЕНИЕ', 'МЕДИТАЦИИ',
  'МУЗЫКАЛЬНЫЙ СЕРВИС', 'КИНОСЕРВИС', 'СЕРВИС ДОСТАВКИ', 'ЕДА ДОСТАВКА', 'ТАКСИ-СЕРВИС', 'МАРКЕТПЛЕЙС', 'ИНТЕРНЕТ-МАГАЗИН', 'АНАЛИТИКА', 'ФОТОГАЛЕРЕЯ', 'АЛЬБОМ',
  'ОФИСНЫЙ ПАКЕТ', 'ТЕКСТОВЫЙ РЕДАКТОР', 'ТАБЛИЦЫ', 'ПРЕЗЕНТАЦИИ', 'КАЛЬКУЛЯТОР', 'ПРОЕКТ-МЕНЕДЖЕР', 'ДОСКА ЗАДАЧ', 'ВИКИ', 'ФОРУМ', 'ЧАТ',
  'ЭЛЕКТРОННЫЕ БИЛЕТЫ', 'АВИАЛЕНТА', 'ОТЕЛИ', 'АРЕНДА АВТО', 'ДОСТАВКА ПОСЫЛОК', 'ТРЕКИНГ ПОСЫЛОК', 'ПРОДАЖИ', 'CRM', 'САППОРТ', 'ПОМОЩНИК',
  'ЯЗЫКОВОЙ ТРЕНАЖЕР', 'КУРСЫ', 'ПЛАТФОРМА ПОДКАСТОВ', 'АУДИОКНИГИ', 'ЭЛЕКТРОННЫЙ ДНЕВНИК', 'ДНЕВНИК УСПЕВАЕМОСТИ', 'ШКОЛЬНЫЙ ДНЕВНИК', 'СЕРВИС ГОСУСЛУГ', 'ТЕХПОДДЕРЖКА', 'ОПРОСНИК',
  'ОПЛАТА СЧЕТОВ', 'КИОСК ОПЛАТЫ', 'ЭДО', 'ЭЛЕКТРОННЫЙ ДОКУМЕНТ', 'ЭЛЕКТРОННАЯ ПОДПИСЬ', 'ПЕРЕПИСКА', 'ВИДЕОЗВОНОК', 'КОНФЕРЕНЦИЯ', 'ВЕБИНАР', 'ДНЕВНИК ТРЕНИРОВОК',
  'ТРЕКЕР СНА', 'ТРЕКЕР ПИТАНИЯ', 'КУЛИНАРНЫЕ РЕЦЕПТЫ', 'КНИГА РЕЦЕПТОВ', 'ПЛАНИРОВЩИК', 'ЗАМЕР КАЛОРИЙ', 'СЧЕТЧИК ШАГОВ', 'ИГРОВОЙ ЛАУНЧЕР', 'ИГРОВАЯ ПЛАТФОРМА', 'ГЕЙМИНГ СЕРВИС',
  'ФОТОФИЛЬТРЫ', 'ГЕНЕРАТОР МЕМОВ', 'АВАТАРКА', 'ПРОФИЛЬ', 'КОММЕНТАРИИ', 'ЛЕНТА', 'СТОРИС', 'РЕДАКТОР ВИДЕО', 'КОЛЛАЖ', 'СЛАЙД-ШОУ'
];

const poolNature = [
  'ДОЖДЬ', 'СНЕГ', 'ГРАД', 'ТУМАН', 'ВЕТЕР', 'ШТОРМ', 'УРАГАН', 'ЦИКЛОН', 'АНТИЦИКЛОН', 'МЕТЕЛЬ',
  'ГРОЗА', 'МОЛНИЯ', 'ГРОМ', 'РАДУГА', 'РОСА', 'ИНЕЙ', 'ГОЛОЛЕД', 'ЦУНАМИ', 'ЗЕМЛЕТРЯСЕНИЕ', 'ИЗВЕРЖЕНИЕ ВУЛКАНА',
  'ЛАВА', 'ВУЛКАН', 'ОПОЛЗЕНЬ', 'СЕЛЬ', 'НАВОДНЕНИЕ', 'ЗАСУХА', 'ПОЖАР', 'СМЕРЧ', 'ТОРНАДО', 'ПЫЛЕВАЯ БУРЯ',
  'ПРИЛИВ', 'ОТЛИВ', 'МОРСКОЕ ТЕЧЕНИЕ', 'ПРИБОЙ', 'ВОЛНА', 'ЛЕДОХОД', 'ПОЛЫНЬЯ', 'АЙСБЕРГ', 'СЕВЕРНОЕ СИЯНИЕ', 'СОЛНЦЕ',
  'ЛУНА', 'ЗАТМЕНИЕ', 'КОМЕТА', 'МЕТЕОР', 'МЕТЕОРИТ', 'ЗВЕЗДОПАД', 'ПЫЛЕВОЕ ОБЛАКО', 'ГРАВИТАЦИОННАЯ ВОЛНА', 'СУМЕРКИ', 'РАССВЕТ',
  'ЗАКАТ', 'ЖАРА', 'ХОЛОД', 'МОРОЗ', 'ТЕПЛО', 'ДОЖДЕВИК', 'СНЕГОПАД', 'ПАСМУРНОСТЬ', 'ЯСНОСТЬ', 'ОБЛАЧНОСТЬ',
  'ПОЛНОЛУНИЕ', 'МОЛОДАЯ ЛУНА', 'СОЛНЕЧНАЯ АКТИВНОСТЬ', 'МАГНИТНАЯ БУРЯ', 'СВЕТИЛО', 'СИЯНИЕ', 'ТУМАННОСТЬ', 'ПЕСКОВАЯ БУРЯ', 'ХУРТОВИНА', 'ИНВЕРСИЯ'
];

const poolScience = [
  'АЛГОРИТМ', 'ДАННЫЕ', 'БАЗА ДАННЫХ', 'СЕТЕВОЙ ПРОТОКОЛ', 'ИНТЕРНЕТ', 'СЕРВЕР', 'КЛИЕНТ', 'API', 'ИСКУССТВЕННЫЙ ИНТЕЛЛЕКТ', 'МАШИННОЕ ОБУЧЕНИЕ',
  'НЕЙРОСЕТЬ', 'ОБРАБОТКА ИЗОБРАЖЕНИЙ', 'КОМПЬЮТЕРНОЕ ЗРЕНИЕ', 'ОБРАБОТКА ЕСТЕСТВЕННОГО ЯЗЫКА', 'КИБЕРБЕЗОПАСНОСТЬ', 'ШИФРОВАНИЕ', 'КВАНТОВЫЙ КОМПЬЮТЕР', 'СЕНСОР', 'РОБОТ', 'ДРОН',
  'СПУТНИК', 'КОСМИЧЕСКИЙ АППАРАТ', 'РАКЕТА', 'КОСМОДРОМ', 'ТЕЛЕСКОП', 'МИКРОСКОП', 'ЛАБОРАТОРИЯ', 'ЭКСПЕРИМЕНТ', 'ГИПОТЕЗА', 'ТЕОРИЯ',
  'ГЕНЕТИКА', 'ГЕНОМ', 'КЛОНИРОВАНИЕ', 'БИОТЕХНОЛОГИИ', 'СИНТЕТИЧЕСКАЯ БИОЛОГИЯ', 'ВАКЦИНА', 'АНТИБИОТИК', 'БАКТЕРИЯ', 'ВИРУС', 'МИКРОБ',
  'НАНОТЕХНОЛОГИИ', 'ПОЛИМЕР', 'КЕРАМИКА', 'СПЛАВ', 'ПОЛУПРОВОДНИК', 'СВЕРХПРОВОДНИК', 'ФОТОН', 'ЭЛЕКТРОН', 'КВАРК', 'АТОМ',
  'МОЛЕКУЛА', 'КРИСТАЛЛ', 'ТЕРМОЯДЕРНЫЙ СИНТЕЗ', 'ЯДЕРНАЯ РЕАКЦИЯ', 'ЛАЗЕР', 'СПЕКТРОМЕТР', 'АКСЕЛЕРОМЕТР', 'ГИРОСКОП', 'GPS', 'ЛИДАР',
  'ОСЦИЛЛОГРАФ', 'ГЕНЕРАТОР СИГНАЛОВ', 'ПЛАТА', 'МИКРОЧИП', 'ПРОЦЕССОР', 'ГРАФИЧЕСКИЙ ПРОЦЕССОР', 'ОПЕРАЦИОННАЯ ПАМЯТЬ', 'ПОСТОЯННАЯ ПАМЯТЬ', 'ДАТЧИК', 'ПРИБОР'
];

const poolCelebs = [
  'АКТЕР', 'АКТРИСА', 'ПЕВЕЦ', 'ПЕВИЦА', 'РЕЖИССЕР', 'ПРОДЮСЕР', 'КОМПОЗИТОР', 'ПИСАТЕЛЬ', 'ПОЭТ', 'ХУДОЖНИК',
  'АРХИТЕКТОР', 'СКУЛЬПТОР', 'ДИЗАЙНЕР', 'МОДЕЛЬ', 'ФОТОГРАФ', 'ЖУРНАЛИСТ', 'ВЕДУЩИЙ', 'БЛОГЕР', 'ИНФЛЮЕНСЕР', 'СПОРТСМЕН',
  'ФУТБОЛИСТ', 'БАСКЕТБОЛИСТ', 'ТЕННИСИСТ', 'ФИГУРИСТ', 'ШОУМЕН', 'ЮМОРИСТ', 'ВИДЕОБЛОГЕР', 'ТИКТОКЕР', 'РЕПЕР', 'ДИДЖЕЙ',
  'РОК-МУЗЫКАНТ', 'ПИАНИСТ', 'СКРИПАЧ', 'ГИТАРИСТ', 'БАРИТОН', 'СОПРАНО', 'ДИРИЖЕР', 'ТЕЛЕЗВЕЗДА', 'КИНОЗВЕЗДА', 'ИДОЛ',
  'ОСКАРОНОСЕЦ', 'ЛАУРЕАТ', 'НОБЕЛЕВСКИЙ ЛАУРЕАТ', 'ЧЕМПИОН', 'РЕКОРДСМЕН', 'ЧЕМПИОН МИРА', 'ЗВЕЗДА ЭСТРАДЫ', 'ЗВЕЗДА КИНО', 'ЗВЕЗДА СПОРТА', 'МИСС МИРА',
  'МИСС ВСЕЛЕННАЯ', 'ИНФОТЕЙНЕР', 'РЕАЛИТИ-ЗВЕЗДА', 'СТЕНДАП-КОМИК', 'КИНОКРИТИК', 'ШОУ-РАННЕР', 'КЛИПМЕЙКЕР', 'СЦЕНАРИСТ', 'МЕМ-ГЕРОЙ', 'КУЛЬТОВАЯ ЛИЧНОСТЬ'
];

function loadExisting(csvPath) {
  const raw = fs.readFileSync(csvPath, 'utf8');
  return raw
    .split(/\r?\n/)
    .map(l => l.trim())
    .filter(Boolean)
    .map(line => line.split(',')[0])
    .map(normalizeForSet);
}

function buildEntries() {
  const asEntries = (arr, category) => arr.map(w => ({ word: w, category, level: 'обычный' }));
  const all = [
    ...asEntries(poolDigital, C.digital),
    ...asEntries(poolNature, C.nature),
    ...asEntries(poolScience, C.science),
    ...asEntries(poolCelebs, C.celebs),
  ];
  return all;
}

function main() {
  const csvPath = path.join(__dirname, '..', 'public', 'words.csv');
  if (!fs.existsSync(csvPath)) {
    console.error('public/words.csv not found');
    process.exit(1);
  }

  const existingSet = new Set(loadExisting(csvPath));
  const candidates = buildEntries();

  const seen = new Set();
  const filtered = [];
  for (const e of candidates) {
    const n = normalizeForSet(e.word);
    if (!n) continue;
    if (existingSet.has(n)) continue;
    if (seen.has(n)) continue;
    seen.add(n);
    filtered.push(e);
  }

  const TARGET = 200;
  const toAppend = filtered.slice(0, TARGET);

  if (!toAppend.length) {
    console.log('No new entries to append.');
    return;
  }

  const block = toAppend.map(e => `${e.word},${e.category},${e.level}`).join('\n');
  const existingRaw = fs.readFileSync(csvPath, 'utf8');
  const needsNewline = existingRaw.length && !/\n$/.test(existingRaw);
  fs.appendFileSync(csvPath, (needsNewline ? '\n' : '') + block + '\n');

  console.log(`Appended ${toAppend.length} entries to public/words.csv`);
}

main();


