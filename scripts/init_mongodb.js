#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MongoDB –¥–ª—è Hat Web
 * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã
 */

require('dotenv').config();
const mongoConnection = require('../src/infrastructure/MongoConnection');

class MongoInitializer {
  constructor() {
    this.db = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
   */
  async initialize() {
    try {
      this.db = await mongoConnection.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
   */
  async createIndexes() {
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    try {
      await mongoConnection.createIndexes();
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async checkStatus() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const stats = await this.db.stats();
      console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${stats.db}`);
      console.log(`üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏–∏: ${stats.collections}`);
      console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: ${stats.objects}`);
      console.log(`üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${(stats.dataSize / 1024 / 1024).toFixed(2)} MB`);
      console.log(`üóÇÔ∏è –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤: ${(stats.indexSize / 1024 / 1024).toFixed(2)} MB`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
   */
  async checkCollections() {
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
    
    try {
      const collections = await this.db.listCollections().toArray();
      const collectionNames = collections.map(c => c.name);
      
      const expectedCollections = ['players', 'player_stats', 'games', 'game_events', 'words', 'leaderboards'];
      
      console.log('üìÅ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
      collectionNames.forEach(name => {
        console.log(`   - ${name}`);
      });
      
      console.log('\nüìã –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
      expectedCollections.forEach(name => {
        const exists = collectionNames.includes(name);
        console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${name}`);
      });
      
      const missingCollections = expectedCollections.filter(name => !collectionNames.includes(name));
      if (missingCollections.length > 0) {
        console.log(`\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${missingCollections.join(', ')}`);
        console.log('   –û–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
   */
  async checkIndexes() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    try {
      const collections = ['players', 'player_stats', 'games', 'words', 'leaderboards'];
      
      for (const collectionName of collections) {
        const collection = this.db.collection(collectionName);
        const indexes = await collection.indexes();
        
        console.log(`\nüìä –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ${collectionName}:`);
        indexes.forEach(index => {
          const key = Object.keys(index.key).map(k => `${k}:${index.key[k]}`).join(', ');
          const unique = index.unique ? ' (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π)' : '';
          const sparse = index.sparse ? ' (—Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–π)' : '';
          console.log(`   - ${index.name}: {${key}}${unique}${sparse}`);
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  async runInitialization() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB –¥–ª—è Hat Web...');
    
    try {
      await this.initialize();
      await this.createIndexes();
      await this.checkStatus();
      await this.checkCollections();
      await this.checkIndexes();
      
      console.log('\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö: npm run migrate:mongodb');
      console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
    } catch (error) {
      console.error('\n‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
      process.exit(1);
    } finally {
      await mongoConnection.disconnect();
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const initializer = new MongoInitializer();
  initializer.runInitialization();
}

module.exports = MongoInitializer;

