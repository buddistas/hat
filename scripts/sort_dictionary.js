#!/usr/bin/env node

/**
 * –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤–∞—Ä—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/sort_dictionary.js
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏—Ä–µ –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤)
 * - –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏ (—Å–ª–æ–≤–æ+–∫–∞—Ç–µ–≥–æ—Ä–∏—è+—É—Ä–æ–≤–µ–Ω—å)
 * - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º –ø–æ —Å–ª–æ–≤—É (—Ä—É—Å—Å–∫–∞—è –∫–æ–ª–ª—è—Ü–∏—è)
 * - –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π
 * - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * 
 * –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–∏–∑ ProjectPlan.md, —Ä–∞–∑–¥–µ–ª 12.1):
 * - –§–æ—Ä–º–∞—Ç CSV: —Å–ª–æ–≤–æ,–∫–∞—Ç–µ–≥–æ—Ä–∏—è,—É—Ä–æ–≤–µ–Ω—å
 * - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–ª—Ñ–∞–≤–∏—Ç ru, sensitivity=base), –∑–∞—Ç–µ–º –ø–æ —Å–ª–æ–≤—É (–∞–ª—Ñ–∞–≤–∏—Ç ru, sensitivity=base)
 * - –£—Ä–æ–≤–µ–Ω—å (–æ–±—ã—á–Ω—ã–π/–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π) –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 * - –ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ ¬´—Å–ª–æ–≤–æ¬ª
 * 
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–∏–∑ ProjectPlan.md, —Ä–∞–∑–¥–µ–ª 9):
 * - –†–µ–≥–∏—Å—Ç—Ä: —Å–ª–æ–≤–∞ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –í –í–ï–†–•–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï
 * - –ö–∏—Ä–∏–ª–ª–∏—Ü–∞: upperCase ‚Üí trim ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏—Ä–µ (‚Äì ‚Äî ‚àí ‚Üí -) –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ (' ` ¬¥ ‚Üí ')
 * - ¬´–Å¬ª –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø—Ä–∏—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è –∫ ¬´–ï¬ª (–∫–æ–ª–ª—è—Ü–∏—è ru, sensitivity=base)
 * - –î–µ–¥—É–ø-–ª–∏–Ω–∏—è: —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏ –∑–∞–ø–∏—Å–µ–π (—Å–ª–æ–≤–æ+–∫–∞—Ç–µ–≥–æ—Ä–∏—è+—É—Ä–æ–≤–µ–Ω—å –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏) —É–¥–∞–ª—è—é—Ç—Å—è
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CSV_PATH = path.join(__dirname, '..', 'public', 'words.csv');
const ALLOWED_LEVELS = new Set(['', '–æ–±—ã—á–Ω—ã–π', '–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π']);
const ALLOWED_CATEGORIES = new Set([
  '–§–ª–æ—Ä–∞ –∏ —Ñ–∞—É–Ω–∞',
  '–ó–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏',
  '–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è',
  '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
  '–¢–µ—Ö–Ω–∏–∫–∞',
  '–í–µ—â–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –±—ã—Ç–∞',
  '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è',
  '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –≤–µ—â–µ—Å—Ç–≤–∞',
  '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ–±–±–∏',
  '–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å',
  '–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
  '–û–±—â–µ—Å—Ç–≤–æ –∏ –±—é—Ä–æ–∫—Ä–∞—Ç–∏—è',
  '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞',
  '–ü—Ä–∞–∑–¥–Ω–∏–∫–∏, –æ–±—ã—á–∞–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏',
  '–¶–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
  '–§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã',
  '–ö–Ω–∏–≥–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞',
  '–§—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º—ã, –ø–æ—Å–ª–æ–≤–∏—Ü—ã –∏ –ø–æ–≥–æ–≤–æ—Ä–∫–∏',
  '–ò—Å—Ç–æ—Ä–∏—è',
  '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –≥–æ—Ä–æ–¥—Å–∫–∞—è —Å—Ä–µ–¥–∞',
  '–ë—Ä–µ–Ω–¥—ã –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –º–∞—Ä–∫–∏',
  '–ú—É–∑—ã–∫–∞',
  '–≠–º–æ—Ü–∏–∏ –∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞',
  '–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
  '–ú–µ–¥–∏–∞'
]);

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ CSV —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–≤—ã—á–µ–∫
 */
function parseCSVLine(line) {
  const result = [];
  let current = '';
  let inQuotes = false;
  
  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') {
      if (inQuotes && line[i + 1] === '"') {
        current += '"';
        i++;
      } else {
        inQuotes = !inQuotes;
      }
    } else if (ch === ',' && !inQuotes) {
      result.push(current.trim());
      current = '';
    } else {
      current += ch;
    }
  }
  result.push(current.trim());
  return result;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ CSV —Å—Ç—Ä–æ–∫–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
function csvJoin(fields) {
  return fields
    .map((f) => {
      if (f == null) return '';
      const needsQuotes = /[",\n]/.test(f);
      let val = String(f).replace(/"/g, '""');
      return needsQuotes ? `"${val}"` : val;
    })
    .join(',');
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏—Ä–µ –∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤
 */
function normalizeHyphensAndApostrophes(str) {
  if (!str) return str;
  return str
    .replace(/[\u2010\u2011\u2012\u2013\u2014\u2015\u2212]/g, '-') // hyphens/dashes ‚Üí -
    .replace(/[\u2018\u2019\u02BC\u2032\u00B4\u0060]/g, "'"); // apostrophes/prime/grave/acute ‚Üí '
}

/**
 * –°—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
 */
function collapseSpaces(str) {
  return String(str || '').replace(/\s+/g, ' ').trim();
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
 */
function normalizeWordToUpper(str) {
  let s = String(str || '');
  s = normalizeHyphensAndApostrophes(s);
  s = collapseSpaces(s);
  // Uppercase using default locale; Node uses ICU; this handles Cyrillic
  s = s.toUpperCase();
  return s;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è —ë‚Üí–µ)
 */
function normalizeForDedup(word) {
  if (!word) return '';
  return normalizeWordToUpper(word)
    .replace(/—ë/g, '–µ')
    .replace(/–Å/g, '–ï');
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–∞
 */
function createBackup(originalContent) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').replace('T', 'T');
  const backupName = `words_backup_${timestamp}.csv`;
  const backupPath = path.join(__dirname, '..', 'public', backupName);
  
  fs.writeFileSync(backupPath, originalContent, 'utf8');
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${path.relative(process.cwd(), backupPath)}`);
  
  return backupPath;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
 */
function validateEntries(entries) {
  const errors = [];
  const seenKeys = new Set();
  
  entries.forEach((entry, idx) => {
    const { word, category, level } = entry;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏ (—Å–ª–æ–≤–æ+–∫–∞—Ç–µ–≥–æ—Ä–∏—è+—É—Ä–æ–≤–µ–Ω—å)
    const key = `${word}|${category}|${level}`;
    if (seenKeys.has(key)) {
      errors.push(`–î—É–±–ª–∏–∫–∞—Ç –∑–∞–ø–∏—Å–∏: "${word}" (${category}, ${level}) @${idx + 1}`);
    } else {
      seenKeys.add(key);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
    if (level && !ALLOWED_LEVELS.has(level)) {
      errors.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: "${level}" @${idx + 1}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category && !ALLOWED_CATEGORIES.has(category)) {
      errors.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: "${category}" @${idx + 1}`);
    }
  });
  
  return errors;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function sortDictionary() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Å–ª–æ–≤–∞—Ä—è...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  if (!fs.existsSync(CSV_PATH)) {
    console.error('‚ùå –§–∞–π–ª public/words.csv –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
  }
  
  // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const raw = fs.readFileSync(CSV_PATH, 'utf8');
  const lines = raw.split(/\r?\n/);
  
  if (lines.length === 0) {
    console.log('‚ö†Ô∏è  –§–∞–π–ª –ø—É—Å—Ç');
    return;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const headerPresent = lines.length > 0 && /\b(—Å–ª–æ–≤–æ|word)\b/i.test(lines[0]);
  const startIndex = headerPresent ? 1 : 0;
  const headerLine = headerPresent ? lines[0] : null;
  
  console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ ${headerPresent ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
  
  // –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–µ–π
  const records = [];
  for (let i = startIndex; i < lines.length; i++) {
    const rawLine = lines[i];
    if (!rawLine || !rawLine.trim()) continue;
    
    const cols = parseCSVLine(rawLine.trim());
    if (cols.length === 0) continue;
    
    const word = collapseSpaces(cols[0] || '');
    const category = collapseSpaces(cols[1] || '');
    const level = collapseSpaces(cols[2] || '');
    
    if (!word) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    
    records.push({ word, category, level });
  }
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π`);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const errors = validateEntries(records);
  const duplicateErrors = errors.filter(err => err.includes('–î—É–±–ª–∏–∫–∞—Ç –∑–∞–ø–∏—Å–∏'));
  const otherErrors = errors.filter(err => !err.includes('–î—É–±–ª–∏–∫–∞—Ç –∑–∞–ø–∏—Å–∏'));
  
  if (otherErrors.length > 0) {
    console.error(`‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (${otherErrors.length}):`);
    otherErrors.slice(0, 10).forEach(err => console.error(`   - ${err}`));
    if (otherErrors.length > 10) {
      console.error(`   ...–∏ –µ—â–µ ${otherErrors.length - 10} –æ—à–∏–±–æ–∫`);
    }
    process.exit(2);
  }
  
  if (duplicateErrors.length > 0) {
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${duplicateErrors.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ)`);
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  console.log('üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π...');
  for (const record of records) {
    record.word = normalizeWordToUpper(record.word);
    record.category = normalizeHyphensAndApostrophes(collapseSpaces(record.category));
    record.level = normalizeHyphensAndApostrophes(collapseSpaces(record.level.toLowerCase())) || '';
  }
  
  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏ (—Å–ª–æ–≤–æ+–∫–∞—Ç–µ–≥–æ—Ä–∏—è+—É—Ä–æ–≤–µ–Ω—å)
  console.log('üîç –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
  const seenKeys = new Set();
  const deduped = [];
  
  for (const record of records) {
    const key = `${record.word}|${record.category}|${record.level}`;
    if (!seenKeys.has(key)) {
      seenKeys.add(key);
      deduped.push(record);
    }
  }
  
  const removedCount = records.length - deduped.length;
  if (removedCount > 0) {
    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ ${removedCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º –ø–æ —Å–ª–æ–≤—É
  console.log('üìö –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–ª–æ–≤—É...');
  const collator = new Intl.Collator('ru', { sensitivity: 'base' });
  
  deduped.sort((a, b) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryCompare = collator.compare(a.category || '', b.category || '');
    if (categoryCompare !== 0) return categoryCompare;
    
    // –ó–∞—Ç–µ–º –ø–æ —Å–ª–æ–≤—É
    return collator.compare(a.word, b.word);
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
  createBackup(raw);
  
  // –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  console.log('üíæ –ó–∞–ø–∏—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...');
  const outLines = [];
  
  if (headerPresent) {
    outLines.push(headerLine.trim());
  }
  
  for (const record of deduped) {
    outLines.push(csvJoin([record.word, record.category, record.level]));
  }
  
  fs.writeFileSync(CSV_PATH, outLines.join('\n') + '\n', 'utf8');
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:');
  console.log(`   üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${deduped.length}`);
  console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${removedCount}`);
  console.log(`   üìÅ –§–∞–π–ª: ${path.relative(process.cwd(), CSV_PATH)}`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categoryStats = {};
  for (const record of deduped) {
    const cat = record.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
    categoryStats[cat] = (categoryStats[cat] || 0) + 1;
  }
  
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
  const sortedCategories = Object.entries(categoryStats)
    .sort(([,a], [,b]) => b - a);
  
  sortedCategories.forEach(([category, count]) => {
    console.log(`   ${category}: ${count}`);
  });
  
  console.log('\n‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  try {
    sortDictionary();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ:', error.message);
    process.exit(1);
  }
}

module.exports = {
  sortDictionary,
  parseCSVLine,
  normalizeWordToUpper,
  normalizeForDedup,
  csvJoin
};
