const databaseConfig = require('../../config/database');
const FileStatsRepository = require('./FileStatsRepository');
const MongoStatsRepository = require('./MongoStatsRepository');
const WordFileRepository = require('./WordFileRepository');
const MongoWordRepository = require('./MongoWordRepository');
const InMemoryGameRepository = require('./InMemoryGameRepository');
const path = require('path');

/**
 * –§–∞–±—Ä–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ MongoDB
 */
class RepositoryFactory {
  constructor() {
    this.statsRepository = null;
    this.wordRepository = null;
    this.gameRepository = null;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  createStatsRepository(baseDir = null) {
    if (this.statsRepository) {
      return this.statsRepository;
    }

    try {
      if (databaseConfig.shouldUseMongoForStats()) {
        console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MongoDB –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        this.statsRepository = new MongoStatsRepository();
      } else {
        console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        const statsDir = baseDir || path.join(__dirname, '../../public/stats');
        this.statsRepository = new FileStatsRepository(statsDir);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      
      if (databaseConfig.isFallbackEnabled()) {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (fallback)');
        const statsDir = baseDir || path.join(__dirname, '../../public/stats');
        this.statsRepository = new FileStatsRepository(statsDir);
      } else {
        throw error;
      }
    }

    return this.statsRepository;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–ª–æ–≤
   */
  createWordRepository(filePath = null) {
    if (this.wordRepository) {
      return this.wordRepository;
    }

    try {
      if (databaseConfig.shouldUseMongoForWords()) {
        console.log('üìö –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è MongoDB –¥–ª—è —Å–ª–æ–≤');
        this.wordRepository = new MongoWordRepository();
      } else {
        console.log('üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–ª–æ–≤');
        const wordsFile = filePath || path.join(__dirname, '../../public/words.csv');
        this.wordRepository = new WordFileRepository(wordsFile);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–ª–æ–≤:', error.message);
      
      if (databaseConfig.isFallbackEnabled()) {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (fallback)');
        const wordsFile = filePath || path.join(__dirname, '../../public/words.csv');
        this.wordRepository = new WordFileRepository(wordsFile);
      } else {
        throw error;
      }
    }

    return this.wordRepository;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–≥—Ä—ã
   */
  createGameRepository() {
    if (this.gameRepository) {
      return this.gameRepository;
    }

    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º InMemoryGameRepository –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å MongoDB –≤–µ—Ä—Å–∏—é
    console.log('üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è InMemory —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –∏–≥—Ä—ã');
    this.gameRepository = new InMemoryGameRepository();
    
    return this.gameRepository;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStatsRepository() {
    return this.statsRepository;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–ª–æ–≤
   */
  getWordRepository() {
    return this.wordRepository;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–≥—Ä—ã
   */
  getGameRepository() {
    return this.gameRepository;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ MongoDB –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  isUsingMongoForStats() {
    return this.statsRepository instanceof MongoStatsRepository;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ MongoDB –¥–ª—è —Å–ª–æ–≤
   */
  isUsingMongoForWords() {
    return this.wordRepository instanceof MongoWordRepository;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getConfigurationInfo() {
    return {
      statsStorage: this.isUsingMongoForStats() ? 'MongoDB' : 'FileSystem',
      wordsStorage: this.isUsingMongoForWords() ? 'MongoDB' : 'FileSystem',
      gameStorage: 'InMemory',
      mongodbEnabled: databaseConfig.useMongoDB,
      fallbackEnabled: databaseConfig.isFallbackEnabled()
    };
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const repositoryFactory = new RepositoryFactory();

module.exports = repositoryFactory;

