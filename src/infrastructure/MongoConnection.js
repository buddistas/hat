const { MongoClient } = require('mongodb');
const databaseConfig = require('../../config/database');

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
 */
class MongoConnection {
  constructor() {
    this.client = null;
    this.db = null;
    this.isConnected = false;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ MongoDB
   */
  async connect() {
    if (this.isConnected) {
      return this.db;
    }

    try {
      const config = databaseConfig.getMongoConfig();
      console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: ${config.uri}`);
      
      this.client = new MongoClient(config.uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      });

      await this.client.connect();
      this.db = this.client.db(config.database);
      this.isConnected = true;
      
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${config.database}`);
      return this.db;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
      this.isConnected = false;
      throw error;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç MongoDB
   */
  async disconnect() {
    if (this.client && this.isConnected) {
      await this.client.close();
      this.isConnected = false;
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MongoDB');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  getDatabase() {
    if (!this.isConnected) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return this.db;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  isConnectionActive() {
    return this.isConnected;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
   */
  async createIndexes() {
    if (!this.isConnected) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    const db = this.getDatabase();

    try {
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è players
      await db.collection('players').createIndex({ "playerKey": 1 }, { unique: true });
      await db.collection('players').createIndex({ "telegramUserId": 1 }, { unique: true, sparse: true });
      await db.collection('players').createIndex({ "lastPlayedAt": -1 });

      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è player_stats
      await db.collection('player_stats').createIndex({ "playerKey": 1 }, { unique: true });
      await db.collection('player_stats').createIndex({ "totals.gamesPlayed": -1 });
      await db.collection('player_stats').createIndex({ "bestWinStreak": -1 });
      await db.collection('player_stats').createIndex({ "medianSpwByRound.r0": 1 });
      await db.collection('player_stats').createIndex({ "medianSpwByRound.r1": 1 });
      await db.collection('player_stats').createIndex({ "medianSpwByRound.r2": 1 });

      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è games
      await db.collection('games').createIndex({ "gameId": 1 }, { unique: true });
      await db.collection('games').createIndex({ "startedAt": -1 });
      await db.collection('games').createIndex({ "endedAt": -1 });
      await db.collection('games').createIndex({ "players.playerKey": 1 });

      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è words
      await db.collection('words').createIndex({ "word": 1 }, { unique: true });
      await db.collection('words').createIndex({ "category": 1 });
      await db.collection('words').createIndex({ "level": 1 });
      await db.collection('words').createIndex({ "category": 1, "level": 1 });

      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è leaderboards
      await db.collection('leaderboards').createIndex({ "metric": 1 }, { unique: true });
      await db.collection('leaderboards').createIndex({ "updatedAt": -1 });

      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã MongoDB —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
const mongoConnection = new MongoConnection();

module.exports = mongoConnection;

