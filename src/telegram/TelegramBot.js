const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

class TelegramBotService {
    constructor(token, gameService, statsService) {
        this.token = token;
        this.gameService = gameService;
        this.statsService = statsService;
        this.gameUrl = process.env.GAME_URL || 'http://localhost:4000';
        this.logsDir = path.join(__dirname, '../../logs');
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(this.logsDir)) {
            fs.mkdirSync(this.logsDir, { recursive: true });
        }
        
        try {
            this.bot = new TelegramBot(token, { 
                polling: {
                    interval: 1000,
                    autoStart: false
                }
            });
            
            this.setupHandlers();
            this.startPolling();
            this.log('Telegram bot initialized');
        } catch (error) {
            this.log(`Error initializing Telegram bot: ${error.message}`, 'error');
            throw error;
        }
    }

    setupHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        this.bot.onText(/\/start/, (msg) => {
            this.handleStart(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
        this.bot.on('callback_query', (callbackQuery) => {
            this.handleCallbackQuery(callbackQuery);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        this.bot.on('message', (msg) => {
            if (msg.text && msg.text.startsWith('/')) {
                return; // –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            }
            this.handleTextMessage(msg);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        this.bot.on('error', (error) => {
            this.log(`Bot error: ${error.message}`, 'error');
        });
    }

    startPolling() {
        try {
            this.bot.startPolling();
            this.log('Bot polling started');
        } catch (error) {
            this.log(`Error starting polling: ${error.message}`, 'error');
        }
    }

    stopPolling() {
        try {
            this.bot.stopPolling();
            this.log('Bot polling stopped');
        } catch (error) {
            this.log(`Error stopping polling: ${error.message}`, 'error');
        }
    }

    handleStart(msg) {
        const chatId = msg.chat.id;
        const username = msg.from.username;
        
        this.log(`User ${username} started bot`);
        this.sendMainMenu(chatId);
    }

    handleCallbackQuery(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const data = callbackQuery.data;
        const username = callbackQuery.from.username;

        this.log(`User ${username} pressed button: ${data}`);

        switch (data) {
            case 'start_game':
                this.handleStartGame(chatId, messageId, username);
                break;
            case 'join_game':
                this.handleJoinGame(chatId, messageId, username);
                break;
            case 'leave_game':
                this.handleLeaveGame(chatId, messageId, username);
                break;
            case 'end_game':
                this.handleEndGame(chatId, messageId, username);
                break;
            default:
                this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                    show_alert: true
                });
        }
    }

    handleTextMessage(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;
        const username = msg.from.username;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if (text === '1104') {
            this.handleEndGameConfirmation(chatId, username);
        } else {
            this.bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π.');
        }
    }

    async handleStartGame(chatId, messageId, username) {
        try {
            const gameStatus = await this.gameService.getGameStatus();
            
            if (gameStatus.isActive) {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–π.',
                    show_alert: true
                });
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            const gameId = await this.gameService.startNewGame();
            
            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            const gameUrl = `${this.gameUrl}?autoJoin=true&username=${username}&gameId=${gameId}`;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
            const keyboard = {
                inline_keyboard: [[
                    { text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ', url: gameUrl }
                ]]
            };

            await this.bot.editMessageText(
                'üéØ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:',
                {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: keyboard
                }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            setTimeout(() => {
                this.sendMainMenu(chatId);
            }, 2000);

            this.log(`Game started by ${username}, gameId: ${gameId}`);
            
        } catch (error) {
            this.log(`Error starting game: ${error.message}`, 'error');
            this.bot.answerCallbackQuery({ message_id: messageId }, {
                text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã',
                show_alert: true
            });
        }
    }

    async handleJoinGame(chatId, messageId, username) {
        try {
            const gameStatus = await this.gameService.getGameStatus();
            
            if (!gameStatus.isActive) {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É.',
                    show_alert: true
                });
                return;
            }

            if (gameStatus.playersCount >= gameStatus.maxPlayers) {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '–ò–≥—Ä–∞ —É–∂–µ –Ω–∞–±—Ä–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.',
                    show_alert: true
                });
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É
            const success = await this.gameService.addPlayer(username, username);
            
            if (success) {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!',
                    show_alert: true
                });
                this.log(`Player ${username} joined the game`);
            } else {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ',
                    show_alert: true
                });
            }
            
        } catch (error) {
            this.log(`Error joining game: ${error.message}`, 'error');
            this.bot.answerCallbackQuery({ message_id: messageId }, {
                text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ',
                show_alert: true
            });
        }
    }

    async handleLeaveGame(chatId, messageId, username) {
        try {
            const gameStatus = await this.gameService.getGameStatus();
            
            if (!gameStatus.isActive) {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.',
                    show_alert: true
                });
                return;
            }

            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã
            const success = await this.gameService.removePlayer(username);
            
            if (success) {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '‚úÖ –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –∏–≥—Ä—ã.',
                    show_alert: true
                });
                this.log(`Player ${username} left the game`);
            } else {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ.',
                    show_alert: true
                });
            }
            
        } catch (error) {
            this.log(`Error leaving game: ${error.message}`, 'error');
            this.bot.answerCallbackQuery({ message_id: messageId }, {
                text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –∏–≥—Ä—ã',
                show_alert: true
            });
        }
    }

    async handleEndGame(chatId, messageId, username) {
        try {
            const gameStatus = await this.gameService.getGameStatus();
            
            if (!gameStatus.isActive) {
                this.bot.answerCallbackQuery({ message_id: messageId }, {
                    text: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.',
                    show_alert: true
                });
                return;
            }

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await this.bot.editMessageText(
                'üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥: 1104',
                {
                    chat_id: chatId,
                    message_id: messageId
                }
            );

            this.log(`User ${username} requested game end confirmation`);
            
        } catch (error) {
            this.log(`Error requesting game end: ${error.message}`, 'error');
            this.bot.answerCallbackQuery({ message_id: messageId }, {
                text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã',
                show_alert: true
            });
        }
    }

    async handleEndGameConfirmation(chatId, username) {
        try {
            const success = await this.gameService.endGame();
            
            if (success) {
                await this.bot.sendMessage(chatId, 'üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!');
                this.log(`Game ended by ${username}`);
            } else {
                await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.');
            }
            
        } catch (error) {
            this.log(`Error ending game: ${error.message}`, 'error');
            await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã.');
        }
    }

    sendMainMenu(chatId) {
        const gameStatus = this.getGameStatusSync();
        
        const keyboard = {
            inline_keyboard: [
                [
                    { 
                        text: gameStatus.isActive ? 'üéØ –°—Ç–∞—Ä—Ç (–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ)' : 'üéØ –°—Ç–∞—Ä—Ç', 
                        callback_data: 'start_game',
                        disabled: gameStatus.isActive
                    },
                    { 
                        text: 'üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 
                        callback_data: 'join_game',
                        disabled: !gameStatus.isActive || gameStatus.playersCount >= gameStatus.maxPlayers
                    }
                ],
                [
                    { 
                        text: '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è', 
                        callback_data: 'leave_game',
                        disabled: !gameStatus.isActive
                    },
                    { 
                        text: 'üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', 
                        callback_data: 'end_game',
                        disabled: !gameStatus.isActive
                    }
                ]
            ]
        };

        const statusText = gameStatus.isActive 
            ? `üéÆ –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${gameStatus.playersCount}/${gameStatus.maxPlayers}`
            : 'üéÆ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã';

        this.bot.sendMessage(chatId, `üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π\n\n${statusText}`, {
            reply_markup: keyboard
        });
    }

    getGameStatusSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
        try {
            const gameState = this.gameService.getGameState();
            return {
                isActive: gameState && gameState.players && gameState.players.length > 0,
                playersCount: gameState ? gameState.players.length : 0,
                maxPlayers: gameState ? gameState.maxPlayers || 20 : 20
            };
        } catch (error) {
            return {
                isActive: false,
                playersCount: 0,
                maxPlayers: 20
            };
        }
    }

    log(message, level = 'info') {
        const timestamp = new Date().toISOString();
        const logEntry = {
            timestamp,
            level,
            message
        };
        
        const logFile = path.join(this.logsDir, 'telegram-bot.log');
        fs.appendFileSync(logFile, JSON.stringify(logEntry) + '\n');
        
        console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –∏–≥—Ä—ã
    async notifyGameEvent(event, data) {
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.log(`Game event: ${event}`, 'info');
    }
}

module.exports = TelegramBotService;
